#!/usr/bin/env python
# coding=utf-8

import numpy as np
import pylab as pl

def create_p(x):
    return 0.3 * np.exp(-(x - 0.3) ** 2) + 0.7 * np.exp(-(x - 2.) ** 2 / 0.5)

def create_q(x):
    return np.exp(-(x - 5) ** 2 / (10 ** 2))

def create_sample():
    stepsize = 0.5
    x = np.arange(-10, 20, stepsize)
    px = np.zeros(np.shape(x))
    for i in range(len(x)):
        px[i] = create_p(x[i])
    return x, px

def MH(n):
    u = np.random.rand(n)
    y = np.zeros(n)
    y[0] = np.random.normal(5, 10)
    count1, count2 = 0, 0
    for i in range(n - 1):
        ynew = np.random.normal(5, 10)
        alpha = min(1, (create_p(ynew)*create_q(y[i])) / (create_p(y[i]) * create_q(ynew)))
        if u[i] < alpha:
            y[i+1] = ynew
            count1 += 1
        else:
            y[i+1] = y[i]
            count2 += 1
    print count1, count2
    return y

def random_walk(n):
    u2 = np.random.rand(n)
    y2 = np.zeros(n)
    y2[0] = np.random.normal(5, 10)
    count1, count2 = 0, 0
    for i in range(n - 1):
        ynew2 = y2[i] + np.random.normal(5, 10)
        alpha = min(1, (create_p(ynew2) / create_p(y2[i])))
        if u2[i] < alpha:
            y2[i+1] = ynew2
            count1 += 1
        else:
            y2[i+1] = y2[i]
            count2 += 1
    print count1, count2
    return y2


if __name__ == '__main__':
    #print np.random.normal(10,5)
    pl.figure(1)
    nbins = 30
    y = MH(5000)
    x, px = create_sample()
    pl.hist(y, bins = x)
    pl.plot(x, px * 5000 / sum(px), color = 'r', linewidth = 2)

    pl.figure(2)
    nbins =30
    y2 = random_walk(5000)
    x, px = create_sample()
    pl.hist(y2, bins = x)
    pl.plot(x, px * 5000 / sum(px), color = 'r', linewidth = 2)
    pl.show()
